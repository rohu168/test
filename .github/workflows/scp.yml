name: build-and-deploy
on:
 # push:
 #   branches:
 #     - master
  watch:
    types: started

env:
  SSH_ACTIONS: false
  UPLOAD_TO_N1: true
  AUTORSETOP: ${{ env.UPLOAD_TO_N1 }} && true
  SENDMSG: true 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      
      # - name: 创建文件
      #   run: |
      #     mkdir -p openwrt/bin/targets/armvirt/64
      #     cp openwrt-armvirt-64-default-rootfs.tar.gz.* openwrt/bin/targets/armvirt/64
      #     # cp openwrt-armvirt-64-default-rootfs.tar.gz openwrt/bin/targets/armvirt/64
      #     cd openwrt/bin/targets/*/*
      #     # targz="Auto$((10#$(date +"%m%d")))v$((10#$(date +"%H")+8))-op.tar.gz"
      #     cat openwrt-armvirt-64-default-rootfs.tar.gz.* > openwrt-armvirt-64-default-rootfs.tar.gz
      #     # mv openwrt-armvirt-64-default-rootfs.tar.gz  ${targz}       
      #     echo "::set-env name=FIRMWARE::$(pwd)"
      #     echo "::set-env name=FIRMWARENAME::openwrt/bin/targets/armvirt/64/${targz}"

      # - name: Free up disk space
      #   # if: env.FREE_UP_DISK == 'true'
      #   env:
      #     DEBIAN_FRONTEND: noninteractive
      #   run: |
      #     sudo rm -rf /usr/share/dotnet
      #     # docker rmi `docker images -q`
      #     sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
      #     sudo -E apt-get -qq autoremove --purge
      #     sudo -E apt-get -qq clean

      # - name: Initialization environment
      #   env:
      #     DEBIAN_FRONTEND: noninteractive
      #   run: |
      #     sudo swapoff /swapfile
      #     sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
      #     # sudo -E apt-get -qq update
      #     # sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
      #     sudo -E apt-get -qq autoremove --purge
      #     sudo -E apt-get -qq clean
      #     curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc


      - name: 创建文件
        run: |
          mkdir -p openwrt/bin/targets/armvirt/64
          cp arm64-r20.2.15-20200219-huge-fix-ccx.config openwrt/bin/targets/*/*/ 
          cd openwrt/bin/targets/*/*
          md5sum *.config > *.config.md5

      # - name: SSH connection to Actions
      #   env:
      #     ACTIONS_DEPLOY_KEY: ${{ secrets.UPDOAD_N1 }}
      #     HOST: ${{ secrets.HOST }}
      #     USER: root
      #     USERNAME: ${{ secrets.USERNAME }}
      #     PASSWORD: ${{ secrets.PASSWORD }}
      #     PORT: ${{ secrets.PORT }}
      #     HOME_PATH: /root/ccx
      #   uses: P3TERX/debugger-action@master
      #   if: env.SSH_ACTIONS == 'true'
      
      - name: 上传固件到N1
        if: env.UPLOAD_TO_N1 == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          # rm: 1 # 上传前先清空目录
          source: "openwrt/bin/targets/*/*/*.config{,.md5}"
          # source: "./${FIRMWARENAME}"
          target: "ccx"
          strip_components: 5

      # - name: ssh命令
      #   if: env.AUTOSSH == 'true' && success() && !cancelled()
      #   uses: appleboy/ssh-action@master
      #   with:
      #     host: ${{ secrets.HOST }}
      #     username: ${{ secrets.USERNAME }}
      #     password: ${{ secrets.PASSWORD }}
      #     port: ${{ secrets.PORT }}
      #     script: cd ccx && bash test.sh
      
      # - name: change
      #   run: |
      #     [ ${{ UPLOAD_TO_N1 }} == 'false' ] && env.AUTORSETOP=false
      #  run: |
      #    [ ${{ env.UPLOAD_TO_N1 }} == 'false' ] && env.AUTORSETOP='false'


      # - name: test
      #   if: env.AUTORSETOP == 'false' && env.SENDMSG == 'true'
      #   uses: yakumioto/serverchan-action@v1
      #   with:
      #     key: ${{ secrets.SCKEY }}
      #     text: 固件编译完成！

      # - name: test
      #   if: env.AUTORSETOP == 'true' && env.SENDMSG == 'true'
      #   uses: yakumioto/serverchan-action@v1
      #   with:
      #     key: ${{ secrets.SCKEY }}
      #     text: 固件编译没有完成！




      # - name: Sending message
      #   if: env.AUTORSETOP == 'false' && env.SENDMSG == 'true'
      #   uses: yakumioto/serverchan-action@v1
      #   with:
      #     key: ${{ secrets.SCKEY }}
      #     text: 固件编译完成！
      #     desp: 源码:${{ env.REPO_URL }}

      # - name: Sending message
      #   if: env.AUTORSETOP == 'false' && env.SENDMSG == 'true'
      #   uses: yakumioto/serverchan-action@v1
      #   with:
      #     key: ${{ secrets.SCKEY }}
      #     text: 固件上传到N1完成！
      #     desp: 源码:${{ env.REPO_URL }}

      # - name: Sending message
      #   if: env.AUTORSETOP == 'true' && env.SENDMSG == 'true'
      #   uses: yakumioto/serverchan-action@v1
      #   with:
      #     key: ${{ secrets.SCKEY }}
      #     text: 自动更新N1固件完成！
      #     desp: 源码:${{ env.REPO_URL }}

          

