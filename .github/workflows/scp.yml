name: build-and-deploy
on:
 # push:
 #   branches:
 #     - master
  watch:
    types: [started] 

env:
  UPLOAD_TO_N1: true
  AUTOSSH: true
  SSH_ACTIONS: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      
      - name: 创建文件
        run: |
          mkdir -p openwrt/bin/targets/armvirt/64
          # cp openwrt-armvirt-64-default-rootfs.tar.gz.* openwrt/bin/targets/armvirt/64
          cp openwrt-armvirt-64-default-rootfs.tar.gz openwrt/bin/targets/armvirt/64
          cd openwrt/bin/targets/*/*
          # targz="Auto$((10#$(date +"%m%d")))v$((10#$(date +"%H")+8))-op.tar.gz"
          # # cat openwrt-armvirt-64-default-rootfs.tar.gz.* > openwrt-armvirt-64-default-rootfs.tar.gz
          # mv openwrt-armvirt-64-default-rootfs.tar.gz  ${targz}       
          echo "::set-env name=FIRMWARE::$(pwd)"
          echo "::set-env name=FIRMWARENAME::openwrt/bin/targets/armvirt/64/${targz}"


      - name: SSH connection to Actions
        env:
          ACTIONS_DEPLOY_KEY: ${{ secrets.UPDOAD_N1 }}
          HOST: ${{ secrets.HOST }}
          USER: root
          USERNAME: ${{ secrets.USERNAME }}
          PASSWORD: ${{ secrets.PASSWORD }}
          PORT: ${{ secrets.PORT }}
          HOME_PATH: /root/ccx
        uses: P3TERX/debugger-action@master
        if: env.SSH_ACTIONS == 'true'
      
      - name: 上传固件到N1
        if: env.UPLOAD_TO_N1 == 'true'
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          # rm: 1 # 上传前先清空目录
          source: "openwrt/bin/targets/armvirt/64/openwrt-armvirt-64-default-rootfs.tar.gz"
          # source: "./${FIRMWARENAME}"
          target: "ccx"
          strip_components: 5

      - name: ssh命令
        if: env.AUTOSSH == 'true' && failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: ${{ secrets.PORT }}
          script: cd ccx && bash auto.sh



